import { ethers } from "ethers";
// 0x1D55838a9EC169488D360783D65e6CD985007b72 CONTRACT INCARCAT CU TOATE DATELE
// 0x79b994D378518EAe46917Aa19F05cE6545fAAc26 CONTRACT CHEL
// 0xb8F30164C4D1f62155F7a1115E68e605069689E4 MEGA CHEL :(((
// 0x49117fC32930E324F2E9A7BeA588FFb26008b8eC PANA LA 7
// 0x4De74F7B2a30a1Ee39b374f6F11859c334234A79 PANA LA 8
// 0x0702AA6Ec5fbC66a4CcdDaaa9B29CB667F6528e3 - test cu 1 -> scoate 5



let w = Array.from({ length: 28 * 28 }, () =>
    Array.from({ length: 10 }, () => [0, 0])
);

function setWeights() {
    w[41][4] = [0, -14206];
    w[65][4] = [0, -17310];
    w[66][4] = [0, -18924];
    w[67][4] = [0, -20649];
    w[68][4] = [0, -21117];
    w[68][5] = [0, -14806];
    w[69][4] = [0, -17617];
    w[69][5] = [0, -16922];
    w[69][9] = [0, -13294];
    w[70][5] = [0, -18251];
    w[70][8] = [0, -13690];
    w[70][9] = [0, -13168];
    w[71][4] = [0, -15641];
    w[72][4] = [0, -13329];
    w[72][9] = [0, -13565];
    w[73][0] = [0, -13564];
    w[74][4] = [0, -13690];
    w[92][1] = [0, -14542];
    w[92][4] = [0, -15007];
    w[93][4] = [0, -14932];
    w[93][7] = [0, -13342];
    w[94][4] = [0, -14246];
    w[95][1] = [0, -14671];
    w[95][4] = [0, -19420];
    w[95][9] = [0, -15767];
    w[96][4] = [0, -19744];
    w[97][4] = [0, -21314];
    w[97][9] = [0, -14533];
    w[98][4] = [0, -15069];
    w[98][9] = [0, -16243];
    w[99][4] = [0, -15842];
    w[99][9] = [0, -19463];
    w[100][9] = [0, -14100];
    w[106][3] = [0, -13448];
    w[121][9] = [0, -13396];
    w[122][4] = [0, -13411];
    w[122][7] = [0, -15068];
    w[128][9] = [0, -13431];
    w[131][9] = [0, -14479];
    w[133][9] = [0, -15014];
    w[134][9] = [0, -13670];
    w[135][2] = [0, -15260];
    w[135][3] = [0, -17034];
    w[146][9] = [0, -14257];
    w[159][7] = [0, -13405];
    w[160][7] = [0, -13349];
    w[162][9] = [0, -17129];
    w[163][9] = [0, -14794];
    w[164][2] = [0, -15321];
    w[164][9] = [0, -15688];
    w[165][0] = [0, -16626];
    w[165][1] = [0, -13608];
    w[171][5] = [0, -13899];
    w[172][9] = [0, -14553];
    w[173][9] = [0, -19493];
    w[191][7] = [0, -13233];
    w[191][9] = [0, -16299];
    w[192][2] = [0, -15088];
    w[192][9] = [0, -16252];
    w[193][0] = [0, -19385];
    w[193][1] = [0, -18615];
    w[194][0] = [0, -16193];
    w[200][5] = [0, -18674];
    w[200][9] = [0, -14183];
    w[201][9] = [0, -16326];
    w[212][4] = [0, -14372];
    w[219][9] = [0, -15233];
    w[220][2] = [0, -15462];
    w[220][3] = [0, -15482];
    w[220][5] = [0, 13396];
    w[220][9] = [0, -15440];
    w[221][0] = [0, -18293];
    w[221][1] = [0, -20011];
    w[221][5] = [0, 18671];
    w[222][0] = [0, -19030];
    w[222][9] = [0, -13614];
    w[227][5] = [0, -13455];
    w[227][9] = [0, -15802];
    w[228][5] = [0, -19156];
    w[228][9] = [0, -13313];
    w[239][4] = [0, -13425];
    w[247][3] = [0, -13414];
    w[247][6] = [0, -13794];
    w[248][1] = [0, -18227];
    w[248][2] = [0, -19167];
    w[248][3] = [0, -21380];
    w[248][5] = [0, 19391];
    w[249][0] = [0, -19779];
    w[249][1] = [0, -16347];
    w[249][2] = [0, -19461];
    w[249][3] = [0, -14934];
    w[249][5] = [0, 16023];
    w[249][6] = [0, -18696];
    w[249][7] = [0, -16249];
    w[250][0] = [0, -15208];
    w[255][5] = [0, -15151];
    w[256][5] = [0, -17392];
    w[266][4] = [0, -15667];
    w[267][4] = [0, -13620];
    w[269][6] = [0, -15748];
    w[270][6] = [0, -16045];
    w[275][1] = [0, -18661];
    w[275][5] = [0, 14010];
    w[276][1] = [0, -19629];
    w[276][2] = [0, -22468];
    w[276][3] = [0, -26412];
    w[276][4] = [0, -13198];
    w[276][5] = [0, 26273];
    w[276][6] = [0, -14386];
    w[276][7] = [0, -14264];
    w[276][9] = [0, -15170];
    w[277][0] = [0, -22484];
    w[277][1] = [0, -17771];
    w[277][2] = [0, -19993];
    w[277][3] = [0, -14344];
    w[277][4] = [0, -14009];
    w[277][5] = [0, 25705];
    w[277][6] = [0, -23740];
    w[277][9] = [0, -19816];
    w[278][0] = [0, -18080];
    w[278][9] = [0, -14451];
    w[291][3] = [0, -14927];
    w[294][4] = [0, -18670];
    w[296][6] = [0, -14001];
    w[296][7] = [0, 13752];
    w[303][1] = [0, -15755];
    w[304][1] = [0, -21307];
    w[304][2] = [0, -13452];
    w[304][3] = [0, -18861];
    w[304][4] = [0, -14997];
    w[304][5] = [0, 23524];
    w[304][9] = [0, -16311];
    w[305][0] = [0, -15627];
    w[305][5] = [0, 29468];
    w[305][6] = [0, -19296];
    w[306][0] = [0, -13663];
    w[306][5] = [0, 15829];
    w[306][6] = [0, -14716];
    w[306][9] = [0, -16087];
    w[311][5] = [0, -13949];
    w[311][7] = [0, 13902];
    w[317][2] = [0, -13393];
    w[320][2] = [0, -19215];
    w[321][2] = [0, -16153];
    w[322][1] = [0, 13887];
    w[322][2] = [0, -13479];
    w[322][4] = [0, -17356];
    w[323][0] = [0, -16016];
    w[329][5] = [0, -16309];
    w[330][5] = [0, -14841];
    w[332][1] = [0, -16090];
    w[332][3] = [0, -19704];
    w[332][4] = [0, -18313];
    w[332][7] = [0, -15685];
    w[333][4] = [0, -15602];
    w[333][5] = [0, 19395];
    w[333][7] = [0, -14898];
    w[333][9] = [0, -13532];
    w[334][6] = [0, -14402];
    w[341][2] = [0, -13142];
    w[342][2] = [0, -15878];
    w[343][2] = [0, -19061];
    w[344][2] = [0, -14928];
    w[345][2] = [0, -14393];
    w[346][2] = [0, -16103];
    w[347][2] = [0, -14140];
    w[347][4] = [0, 13590];
    w[349][2] = [0, -14229];
    w[349][7] = [0, -13328];
    w[350][0] = [0, -13660];
    w[350][1] = [0, 15489];
    w[350][2] = [0, -13845];
    w[351][0] = [0, -17458];
    w[351][1] = [0, 14250];
    w[352][0] = [0, -16981];
    w[357][5] = [0, -20071];
    w[358][5] = [0, -24871];
    w[359][3] = [0, -13354];
    w[359][5] = [0, -21526];
    w[360][3] = [0, -14692];
    w[360][5] = [0, -20671];
    w[360][9] = [0, -13233];
    w[361][9] = [0, -20934];
    w[369][2] = [0, -19574];
    w[370][2] = [0, -19250];
    w[371][2] = [0, -16247];
    w[375][1] = [0, -14509];
    w[375][4] = [0, 14522];
    w[375][7] = [0, -14324];
    w[376][7] = [0, -21716];
    w[377][7] = [0, -21756];
    w[378][0] = [0, -19247];
    w[378][1] = [0, 15582];
    w[379][0] = [0, -16989];
    w[380][0] = [0, -13142];
    w[386][3] = [0, -13482];
    w[386][5] = [0, -14286];
    w[387][5] = [0, -21425];
    w[388][5] = [0, -22350];
    w[388][9] = [0, -18461];
    w[389][2] = [0, 13476];
    w[389][9] = [0, -17732];
    w[390][2] = [0, 14338];
    w[397][2] = [0, -14174];
    w[402][1] = [0, -13367];
    w[403][1] = [0, -13983];
    w[403][7] = [0, -15362];
    w[404][7] = [0, -21682];
    w[405][7] = [0, -18274];
    w[406][0] = [0, -14642];
    w[406][1] = [0, 14374];
    w[407][0] = [0, -19317];
    w[408][0] = [0, -14350];
    w[416][9] = [0, -22908];
    w[417][9] = [0, -13802];
    w[418][2] = [0, 14605];
    w[424][6] = [0, -19135];
    w[431][7] = [0, -14643];
    w[432][7] = [0, -15321];
    w[433][0] = [0, -16008];
    w[434][0] = [0, -17271];
    w[434][1] = [0, 15103];
    w[435][0] = [0, -15078];
    w[436][4] = [0, 13836];
    w[444][9] = [0, -21730];
    w[445][2] = [0, 15308];
    w[445][3] = [0, -15487];
    w[445][9] = [0, -13118];
    w[446][2] = [0, 13366];
    w[446][6] = [0, -14338];
    w[446][8] = [0, -14263];
    w[452][6] = [0, -14352];
    w[459][7] = [0, -13412];
    w[461][0] = [0, -16733];
    w[462][0] = [0, -17246];
    w[465][1] = [0, -15095];
    w[471][9] = [0, -14495];
    w[472][9] = [0, -18537];
    w[473][2] = [0, 17304];
    w[473][3] = [0, -15299];
    w[473][7] = [0, -15321];
    w[473][9] = [0, -13924];
    w[474][2] = [0, 15007];
    w[474][5] = [0, -14215];
    w[474][6] = [0, -13448];
    w[474][8] = [0, -13685];
    w[480][6] = [0, -14309];
    w[481][1] = [0, -13702];
    w[482][1] = [0, -16733];
    w[485][3] = [0, -13266];
    w[486][3] = [0, -15572];
    w[489][0] = [0, -17305];
    w[490][0] = [0, -16638];
    w[499][9] = [0, -15127];
    w[500][9] = [0, -20869];
    w[501][2] = [0, 17334];
    w[501][3] = [0, -19287];
    w[501][8] = [0, -16914];
    w[501][9] = [0, -14134];
    w[502][6] = [0, -15682];
    w[507][0] = [0, -13803];
    w[507][3] = [0, 14943];
    w[507][8] = [0, -18775];
    w[508][6] = [0, -14282];
    w[509][1] = [0, -15794];
    w[510][1] = [0, -18977];
    w[514][3] = [0, -13941];
    w[517][0] = [0, -13847];
    w[528][9] = [0, -19121];
    w[529][2] = [0, 15762];
    w[529][3] = [0, -15553];
    w[529][4] = [0, -15011];
    w[529][8] = [0, -16989];
    w[535][3] = [0, 14871];
    w[536][1] = [0, -14236];
    w[537][1] = [0, -18622];
    w[541][4] = [0, -13904];
    w[554][7] = [0, -13763];
    w[555][7] = [0, -15747];
    w[556][4] = [0, -15655];
    w[557][2] = [0, 13608];
    w[557][3] = [0, -15391];
    w[557][4] = [0, -15475];
    w[557][8] = [0, -16418];
    w[569][4] = [0, -13955];
    w[570][9] = [0, -14235];
    w[582][7] = [0, -17068];
    w[583][7] = [0, -13638];
    w[591][7] = [0, -13331];
    w[591][9] = [0, -13244];
    w[592][6] = [0, -13398];
    w[595][4] = [0, -14194];
    w[609][7] = [0, -13942];
    w[610][7] = [0, -16149];
    w[620][4] = [0, -13713];
    w[621][1] = [0, 15053];
    w[621][6] = [0, -14795];
    w[622][6] = [0, -15027];
    w[638][7] = [0, -15307];
    w[639][7] = [0, -14757];
    w[647][3] = [0, 13286];
    w[648][0] = [0, -13199];
    w[651][6] = [0, -14456];
    w[667][1] = [0, -13318];
    w[667][7] = [0, -14725];
    w[676][8] = [0, -15830];
    w[677][2] = [0, -13929];
    w[677][7] = [0, 13453];
    w[677][8] = [0, -18977];
    w[680][6] = [0, -13167];
    w[683][6] = [0, -15644];
    w[684][6] = [0, -13663];
    w[692][0] = [0, -16464];
    w[693][0] = [0, -13334];
    w[693][6] = [0, -16515];
    w[694][0] = [0, -13953];
    w[695][7] = [0, -17872];
    w[705][1] = [0, -17210];
    w[705][2] = [0, -13611];
    w[705][8] = [0, -16408];
    w[706][0] = [0, -13236];
    w[707][1] = [0, -19969];
    w[707][2] = [0, -13750];
    w[708][2] = [0, -19249];
    w[709][0] = [0, -16840];
    w[709][2] = [0, -17376];
    w[709][3] = [0, 13180];
    w[710][0] = [0, -14190];
    w[710][1] = [0, -16590];
    w[710][2] = [0, -18814];
    w[711][0] = [0, -15138];
    w[711][1] = [0, -20475];
    w[711][3] = [0, 13619];
    w[712][0] = [0, -16126];
    w[712][3] = [0, 13463];
    w[712][4] = [0, -13649];
    w[713][0] = [0, -14126];
    w[714][0] = [0, -16280];
    w[714][1] = [0, -15299];
    w[715][0] = [0, -15296];
    w[715][1] = [0, -17337];
    w[716][0] = [0, -14676];
    w[716][1] = [0, -21792];
    w[716][4] = [0, -13598];
    w[717][0] = [0, -15358];
    w[717][1] = [0, -15243];
    w[717][4] = [0, -14802];
    w[718][0] = [0, -15696];
    w[719][0] = [0, -17519];
    w[719][4] = [0, -13725];
    w[720][0] = [0, -13737];
    w[722][8] = [0, -15585];
    w[734][8] = [0, -13652];
    w[735][4] = [0, -16238];
    w[736][4] = [0, -15885];
    w[737][4] = [0, -21054];
    w[738][4] = [0, -17788];
    w[739][4] = [0, -19613];
    w[740][4] = [0, -21898];
    w[741][0] = [0, -13416];
    w[741][1] = [0, -15933];
    w[741][4] = [0, -22975];
    w[742][4] = [0, -28279];
    w[743][0] = [0, -13563];
    w[743][4] = [0, -18153];
    w[743][8] = [0, -20607];
    w[744][0] = [0, -13405];
    w[744][4] = [0, -22303];
    w[744][8] = [0, -20441];
    w[745][4] = [0, -23470];
    w[746][4] = [0, -23285];
    w[747][4] = [0, -15715];
    w[747][8] = [0, -18373];
    w[748][4] = [0, -14929];
    w[748][8] = [0, -14932];
    w[749][4] = [0, -14216];
    w[769][9] = [0, -13527];
    w[770][4] = [0, -15446];
}

let test = Array.from({ length: 28 }, () =>
    Array.from({ length: 28 }, () => [0, 0])
);
function setTestData() {
    test[1][12] = [0, 1];
    test[1][13] = [0, 1];
    test[1][14] = [0, 1];
    test[1][15] = [0, 1];
    test[2][8] = [0, 1];
    test[2][9] = [0, 1];
    test[2][10] = [0, 1];
    test[2][11] = [0, 1];
    test[2][12] = [0, 1];
    test[2][15] = [0, 1];
    test[2][16] = [0, 1];
    test[2][17] = [0, 1];
    test[3][6] = [0, 1];
    test[3][7] = [0, 1];
    test[3][8] = [0, 1];
    test[3][17] = [0, 1];
    test[3][18] = [0, 1];
    test[4][6] = [0, 1];
    test[4][19] = [0, 1];
    test[5][6] = [0, 1];
    test[5][19] = [0, 1];
    test[5][20] = [0, 1];
    test[6][6] = [0, 1];
    test[6][20] = [0, 1];
    test[7][6] = [0, 1];
    test[7][20] = [0, 1];
    test[8][20] = [0, 1];
    test[9][20] = [0, 1];
    test[10][19] = [0, 1];
    test[10][20] = [0, 1];
    test[11][14] = [0, 1];
    test[11][15] = [0, 1];
    test[11][16] = [0, 1];
    test[11][17] = [0, 1];
    test[11][18] = [0, 1];
    test[11][19] = [0, 1];
    test[12][14] = [0, 1];
    test[12][15] = [0, 1];
    test[12][17] = [0, 1];
    test[12][18] = [0, 1];
    test[12][19] = [0, 1];
    test[13][19] = [0, 1];
    test[14][19] = [0, 1];
    test[14][20] = [0, 1];
    test[15][20] = [0, 1];
    test[16][20] = [0, 1];
    test[16][21] = [0, 1];
    test[17][21] = [0, 1];
    test[18][21] = [0, 1];
    test[19][21] = [0, 1];
    test[20][21] = [0, 1];
    test[21][5] = [0, 1];
    test[21][20] = [0, 1];
    test[21][21] = [0, 1];
    test[22][5] = [0, 1];
    test[22][6] = [0, 1];
    test[22][7] = [0, 1];
    test[22][19] = [0, 1];
    test[22][20] = [0, 1];
    test[23][7] = [0, 1];
    test[23][8] = [0, 1];
    test[23][9] = [0, 1];
    test[23][16] = [0, 1];
    test[23][17] = [0, 1];
    test[23][18] = [0, 1];
    test[23][19] = [0, 1];
    test[24][10] = [0, 1];
    test[24][11] = [0, 1];
    test[24][12] = [0, 1];
    test[24][13] = [0, 1];
    test[24][14] = [0, 1];
    test[24][15] = [0, 1];
    test[24][16] = [0, 1];
}

// Connect to your custom Ethereum node
const provider = new ethers.JsonRpcProvider("http://95.179.246.157:8547");

// Define a wallet (ensure not to expose private keys in production]
const privateKey = "e4bcd340644e3373e8c152403f0c491af52a2961997654bf6f206a99d4d4b368";
const wallet = new ethers.Wallet(privateKey, provider);
const CONTRACT_ADDRESS = "0x0702AA6Ec5fbC66a4CcdDaaa9B29CB667F6528e3"
const CONTRACT_ABI = [
    {
        "inputs": [],
        "name": "classify",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "int16",
                        "name": "top",
                        "type": "int16"
                    },
                    {
                        "internalType": "int16",
                        "name": "bot",
                        "type": "int16"
                    }
                ],
                "internalType": "struct NeuralNet.Point[8]",
                "name": "",
                "type": "tuple[8]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "inp",
        "outputs": [
            {
                "internalType": "int16",
                "name": "top",
                "type": "int16"
            },
            {
                "internalType": "int16",
                "name": "bot",
                "type": "int16"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "row",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "column",
                "type": "uint256"
            },
            {
                "internalType": "int16",
                "name": "top",
                "type": "int16"
            },
            {
                "internalType": "int16",
                "name": "bot",
                "type": "int16"
            }
        ],
        "name": "setTest",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "row",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "column",
                "type": "uint256"
            },
            {
                "internalType": "int16",
                "name": "top",
                "type": "int16"
            },
            {
                "internalType": "int16",
                "name": "bot",
                "type": "int16"
            }
        ],
        "name": "setWeight",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "line",
                "type": "uint256"
            },
            {
                "components": [
                    {
                        "internalType": "int16",
                        "name": "top",
                        "type": "int16"
                    },
                    {
                        "internalType": "int16",
                        "name": "bot",
                        "type": "int16"
                    }
                ],
                "internalType": "struct NeuralNet.Point[784]",
                "name": "data",
                "type": "tuple[784]"
            }
        ],
        "name": "setWeightLine",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "w",
        "outputs": [
            {
                "internalType": "int16",
                "name": "top",
                "type": "int16"
            },
            {
                "internalType": "int16",
                "name": "bot",
                "type": "int16"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

let contract;

async function upload_weights() {
    for (let i = 56; i < 28 * 28; i++)
        for (let j = 0; j < 10; j++) {
            if (w[i][j][1]) {
                const tx = await contract.setWeight(i, j, w[i][j][0], w[i][j][1]);
                console.log(`Transaction for row ${i} sent:`, tx.hash);
            }
        }
}

async function upload_test() {
    for (let i = 0; i < 28; i++)
        for (let j = 0; j < 28; j++) {
            if (test[i][j][1]) {
                const tx = await contract.setTest(i, j, test[i][j][0], test[i][j][1]);
                console.log(`Transaction for row ${i} sent:`, tx.hash);
            }
        }
}

async function inference() {
    // const gasEstimate = await contract.classify().estimateGas({
    //     from: '0xb7D76B38F12EDb6FA2b5A00A68a2Ccc1acdFB575' // Replace with your address
    // });

    // console.log('Estimated gas:', gasEstimate);

    const result = await contract.classify();
    console.log('Contract function return:', result);
}

async function main() {
    setWeights();
    setTestData();
    // Get the wallet balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`Wallet balance: ${ethers.formatEther(balance)} ETH`);

    contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, wallet);

    // let timeString = new Date().toTimeString();
    // console.log("Started uploading weights at : " + timeString)
    //  await upload_weights()
    // console.log("Finished!")
    // timeString = new Date().toTimeString()
    // console.log("Started uploading test at : " + timeString)
    // await upload_test()
    // console.log("Finished uploading data. Let's inference it !")

    const response = await inference();
    console.log(response)

    // Sending a transaction (use caution, this will send ETH]
    // const tx = {
    //     to: RECIPIENT_ADDRESS,
    //     // value: ethers.parseEther(0.01] // Sending 0.01 ETH
    // };

    // console.log(Sending transaction...];
    // const transaction = await wallet.sendTransaction(tx];
    // await transaction.wait(]; // Wait for the transaction to be mined

    // console.log(Transaction hash:, transaction.hash];

}


main().catch(console.error);